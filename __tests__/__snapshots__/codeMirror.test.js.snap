// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Supported languages ASP.NET should syntax highlight an example 1`] = `
"<div class="cm-s-neo"><span class="cm-operator">&lt;%</span><span class="cm-variable">@</span> <span class="cm-variable">Language</span><span class="cm-operator">=</span> <span class="cm-string">&quot;VBScript&quot;</span> <span class="cm-operator">%&gt;</span>
<span class="cm-operator">&lt;%</span>
  <span class="cm-variable">Response</span>.<span class="cm-variable">Write</span>(<span class="cm-string">&quot;Hello World&quot;</span>)
<span class="cm-operator">%&gt;</span>
</div>"
`;

exports[`Supported languages C should syntax highlight an example 1`] = `
"<div class="cm-s-neo"><span class="cm-variable">#include</span> <span class="cm-operator">&lt;</span><span class="cm-variable">stdio</span>.<span class="cm-variable">h</span><span class="cm-operator">&gt;</span>

<span class="cm-variable">int</span> <span class="cm-variable">main</span>() {
  <span class="cm-variable">printf</span>(<span class="cm-string">&quot;Hello World\\n&quot;</span>);
  <span class="cm-variable">return</span> <span class="cm-number">0</span>;
}
</div>"
`;

exports[`Supported languages C# should syntax highlight an example 1`] = `
"<div class="cm-s-neo"><span class="cm-keyword">class</span> <span class="cm-def">HelloWorld</span> {
  <span class="cm-keyword">static</span> <span class="cm-keyword">void</span> <span class="cm-variable">Main</span>() {
    <span class="cm-variable">System</span>.<span class="cm-variable">Console</span>.<span class="cm-variable">WriteLine</span>(<span class="cm-string">&quot;Hello World&quot;</span>);
  }
}
</div>"
`;

exports[`Supported languages C++ should syntax highlight an example 1`] = `
"<div class="cm-s-neo"><span class="cm-meta">#include &lt;iostream&gt;</span>

<span class="cm-keyword">using</span> <span class="cm-keyword">namespace</span> <span class="cm-def">std</span>;

<span class="cm-type">int</span> <span class="cm-def">main</span>()
{
  <span class="cm-variable">cout</span> <span class="cm-operator">&lt;&lt;</span> <span class="cm-string">&quot;Hello World\\n&quot;</span>;
}
</div>"
`;

exports[`Supported languages CSS should syntax highlight an example 1`] = `
"<div class="cm-s-neo"><span class="cm-tag">body</span>::<span class="cm-variable-3">before</span> {
  <span class="cm-property">content</span>: <span class="cm-string">&quot;Hello World&quot;</span>;
}
</div>"
`;

exports[`Supported languages Clojure should syntax highlight an example 1`] = `
"<div class="cm-s-neo"><span class="cm-bracket">(</span><span class="cm-keyword">println</span> <span class="cm-string">&quot;Hello World&quot;</span><span class="cm-bracket">)</span>
</div>"
`;

exports[`Supported languages D should syntax highlight an example 1`] = `
"<div class="cm-s-neo"><span class="cm-comment">// Hello World in D</span>
<span class="cm-variable">import</span> <span class="cm-variable">std</span>.<span class="cm-variable">stdio</span>;

<span class="cm-variable">void</span> <span class="cm-variable">main</span>()
{
	   <span class="cm-variable">writeln</span>(<span class="cm-string">&quot;Hello World&quot;</span>);
}
</div>"
`;

exports[`Supported languages Dart should syntax highlight an example 1`] = `
"<div class="cm-s-neo"><span class="cm-variable">main</span>() {
  <span class="cm-variable">print</span>(<span class="cm-string">&#x27;Hello World&#x27;</span>);
}
</div>"
`;

exports[`Supported languages Diff should syntax highlight an example 1`] = `
"<div class="cm-s-neo">diff --git a/index.html b/index.html
index c1d9156..7764744 100644
<span class="cm-negative">--- a/index.html</span>
<span class="cm-positive">+++ b/index.html</span>
<span class="cm-meta">@@ -95,7 +95,8 @@ StringStream.prototype = {</span>
     &lt;script&gt;
       var editor = CodeMirror.fromTextArea(document.getElementById(&quot;code&quot;), {
         lineNumbers: true,
<span class="cm-negative">-        autoMatchBrackets: true</span>
<span class="cm-positive">+        autoMatchBrackets: true,</span>
<span class="cm-positive">+      onGutterClick: function(x){console.log(x);}</span>
       });
     &lt;/script&gt;
   &lt;/body&gt;
</div>"
`;

exports[`Supported languages Dockerfile should syntax highlight an example 1`] = `
"<div class="cm-s-neo"><span class="cm-keyword">FROM</span> alpine:3.4
</div>"
`;

exports[`Supported languages Erlang should syntax highlight an example 1`] = `
"<div class="cm-s-neo"><span class="cm-attribute">-module</span>(<span class="cm-atom">erlang_hw</span>).
<span class="cm-attribute">-export</span>([<span class="cm-meta">start/0</span>]).

<span class="cm-tag">start</span>() -&gt;
  <span class="cm-tag">io</span>:<span class="cm-tag">format</span>(<span class="cm-string">&quot;Hello World~n&quot;</span>).
</div>"
`;

exports[`Supported languages Go should syntax highlight an example 1`] = `
"<div class="cm-s-neo"><span class="cm-keyword">package</span> <span class="cm-variable">main</span>

<span class="cm-keyword">import</span> <span class="cm-string">&quot;fmt&quot;</span>

<span class="cm-keyword">func</span> <span class="cm-variable">main</span>() {
  <span class="cm-variable">fmt</span><span class="cm-number">.</span><span class="cm-variable">Println</span>(<span class="cm-string">&quot;Hello World&quot;</span>)
}
</div>"
`;

exports[`Supported languages GraphQL should syntax highlight an example 1`] = `
"<div class="cm-s-neo"><span class="cm-punctuation">{</span>
<span class="cm-ws">  </span><span class="cm-property">person</span><span class="cm-punctuation">(</span><span class="cm-attribute">id</span><span class="cm-punctuation">:</span><span class="cm-ws"> </span><span class="cm-number">4</span><span class="cm-punctuation">)</span><span class="cm-ws"> </span><span class="cm-punctuation">{</span>
<span class="cm-ws">    </span><span class="cm-property">name</span>
<span class="cm-ws">  </span><span class="cm-punctuation">}</span>
<span class="cm-ws">  </span><span class="cm-property">allFilms</span><span class="cm-ws"> </span><span class="cm-punctuation">{</span>
<span class="cm-ws">    </span><span class="cm-property">totalCount</span>
<span class="cm-ws">    </span><span class="cm-property">films</span><span class="cm-ws"> </span><span class="cm-punctuation">{</span>
<span class="cm-ws">      </span><span class="cm-property">releaseDate</span>
<span class="cm-ws">      </span><span class="cm-property">planetConnection</span><span class="cm-ws"> </span><span class="cm-punctuation">{</span>
<span class="cm-ws">        </span><span class="cm-property">planets</span><span class="cm-ws"> </span><span class="cm-punctuation">{</span>
<span class="cm-ws">          </span><span class="cm-property">id</span>
<span class="cm-ws">          </span><span class="cm-property">surfaceWater</span>
<span class="cm-ws">          </span><span class="cm-property">climates</span>
<span class="cm-ws">          </span><span class="cm-property">terrains</span>
<span class="cm-ws">        </span><span class="cm-punctuation">}</span>
<span class="cm-ws">      </span><span class="cm-punctuation">}</span>
<span class="cm-ws">    </span><span class="cm-punctuation">}</span>
<span class="cm-ws">  </span><span class="cm-punctuation">}</span>
<span class="cm-punctuation">}</span>
</div>"
`;

exports[`Supported languages Groovy should syntax highlight an example 1`] = `
"<div class="cm-s-neo"><span class="cm-variable">println</span> <span class="cm-string">&quot;Hello World&quot;</span>
</div>"
`;

exports[`Supported languages HTML should syntax highlight an example 1`] = `
"<div class="cm-s-neo"><span class="cm-meta">&lt;!DOCTYPE html&gt;</span>
<span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">html</span> <span class="cm-attribute">lang</span>=<span class="cm-string">&quot;en&quot;</span><span class="cm-tag cm-bracket">&gt;</span>
<span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">head</span><span class="cm-tag cm-bracket">&gt;</span>
    <span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">meta</span> <span class="cm-attribute">charset</span>=<span class="cm-string">&quot;UTF-8&quot;</span><span class="cm-tag cm-bracket">&gt;</span>
    <span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">meta</span> <span class="cm-attribute">name</span>=<span class="cm-string">&quot;viewport&quot;</span> <span class="cm-attribute">content</span>=<span class="cm-string">&quot;width=device-width, initial-scale=1.0&quot;</span><span class="cm-tag cm-bracket">&gt;</span>
    <span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">title</span><span class="cm-tag cm-bracket">&gt;</span>Hello World!<span class="cm-tag cm-bracket">&lt;/</span><span class="cm-tag">title</span><span class="cm-tag cm-bracket">&gt;</span>
<span class="cm-tag cm-bracket">&lt;/</span><span class="cm-tag">head</span><span class="cm-tag cm-bracket">&gt;</span>
<span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">body</span><span class="cm-tag cm-bracket">&gt;</span>
    <span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">h1</span><span class="cm-tag cm-bracket">&gt;</span>Hello World!<span class="cm-tag cm-bracket">&lt;/</span><span class="cm-tag">h1</span><span class="cm-tag cm-bracket">&gt;</span>
<span class="cm-tag cm-bracket">&lt;/</span><span class="cm-tag">body</span><span class="cm-tag cm-bracket">&gt;</span>
<span class="cm-tag cm-bracket">&lt;/</span><span class="cm-tag">html</span><span class="cm-tag cm-bracket">&gt;</span>
</div>"
`;

exports[`Supported languages HTTP should syntax highlight an example 1`] = `
"<div class="cm-s-neo"><span class="cm-keyword">POST</span> <span class="cm-string-2">/somewhere</span> <span class="cm-keyword">HTTP/1.1</span>
<span class="cm-atom">Host:</span><span class="cm-string"> example.com</span>
<span class="cm-atom">If-Modified-Since:</span><span class="cm-string"> Sat, 29 Oct 1994 19:43:31 GMT</span>
<span class="cm-atom">Content-Type:</span><span class="cm-string"> application/x-www-form-urlencoded;</span>
<span class="cm-string">	charset=utf-8</span>
<span class="cm-atom">User-Agent:</span><span class="cm-string"> Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/536.11 (KHTML, like Gecko) Ubuntu/12.04 Chromium/20.0.1132.47 Chrome/20.0.1132.47 Safari/536.11</span>

This is the request body!
</div>"
`;

exports[`Supported languages JSON should syntax highlight an example 1`] = `
"<div class="cm-s-neo">{
  <span class="cm-property">&quot;hello&quot;</span>: <span class="cm-string">&quot;world&quot;</span>
}
</div>"
`;

exports[`Supported languages JSX should syntax highlight an example 1`] = `
"<div class="cm-s-neo"><span class="cm-keyword">import</span> <span class="cm-def">React</span> <span class="cm-keyword">from</span> <span class="cm-string">&#x27;react&#x27;</span>;

<span class="cm-keyword">const</span> <span class="cm-def">HelloWorld</span> <span class="cm-operator">=</span> <span class="cm-keyword">function</span>() {
  <span class="cm-keyword">return</span> <span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">span</span><span class="cm-tag cm-bracket">&gt;</span>Hello World<span class="cm-tag cm-bracket">&lt;/</span><span class="cm-tag">span</span><span class="cm-tag cm-bracket">&gt;</span>;
};

<span class="cm-variable">HelloWorld</span>.<span class="cm-property">displayName</span> <span class="cm-operator">=</span> <span class="cm-string">&#x27;HelloWorld&#x27;</span>;

<span class="cm-variable">console</span>.<span class="cm-property">log</span>(<span class="cm-variable">React</span>.<span class="cm-property">renderToString</span>(<span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">HelloWorld</span> <span class="cm-tag cm-bracket">/&gt;</span>));
</div>"
`;

exports[`Supported languages Java should syntax highlight an example 1`] = `
"<div class="cm-s-neo"><span class="cm-keyword">public</span> <span class="cm-keyword">class</span> <span class="cm-def">Java</span> {
  <span class="cm-keyword">public</span> <span class="cm-keyword">static</span> <span class="cm-type">void</span> <span class="cm-variable">main</span>(<span class="cm-type">String</span>[] <span class="cm-variable">args</span>) {
    <span class="cm-variable">System</span>.<span class="cm-variable">out</span>.<span class="cm-variable">println</span>(<span class="cm-string">&quot;Hello World&quot;</span>);
  }
}
</div>"
`;

exports[`Supported languages JavaScript should syntax highlight an example 1`] = `
"<div class="cm-s-neo"><span class="cm-variable">alert</span>(<span class="cm-string">&#x27;Hello, world!&#x27;</span>);
</div>"
`;

exports[`Supported languages Julia should syntax highlight an example 1`] = `
"<div class="cm-s-neo"><span class="cm-builtin">println</span>(<span class="cm-string">&quot;Hello World&quot;</span>)
</div>"
`;

exports[`Supported languages Kotlin should syntax highlight an example 1`] = `
"<div class="cm-s-neo"><span class="cm-keyword">package</span> <span class="cm-variable">hello</span>

<span class="cm-keyword">fun</span> <span class="cm-def">main</span>() {
  <span class="cm-variable">println</span>(<span class="cm-string">&quot;Hello World&quot;</span>)
}
</div>"
`;

exports[`Supported languages Liquid should syntax highlight an example 1`] = `
"<div class="cm-s-neo">{% if user %}
  Hello {{ user.name }}!
{% endif %}
</div>"
`;

exports[`Supported languages Lua should syntax highlight an example 1`] = `
"<div class="cm-s-neo"><span class="cm-comment">-- defines a factorial function</span>
<span class="cm-keyword">function</span> <span class="cm-variable">fact</span> (<span class="cm-variable">n</span>)
<span class="cm-keyword">if</span> <span class="cm-variable">n</span> == <span class="cm-number">0</span> <span class="cm-keyword">then</span>
    <span class="cm-keyword">return</span> <span class="cm-number">1</span>
<span class="cm-keyword">else</span>
    <span class="cm-keyword">return</span> <span class="cm-variable">n</span> * <span class="cm-variable">fact</span>(<span class="cm-variable">n-1</span>)
<span class="cm-keyword">end</span>
<span class="cm-keyword">end</span>

<span class="cm-builtin">print</span>(<span class="cm-string">&quot;enter a number:&quot;</span>)
<span class="cm-variable">a</span> = <span class="cm-builtin">io.read</span>(<span class="cm-string">&quot;*number&quot;</span>)        <span class="cm-comment">-- read a number</span>
<span class="cm-builtin">print</span>(<span class="cm-variable">fact</span>(<span class="cm-variable">a</span>))
</div>"
`;

exports[`Supported languages Markdown should syntax highlight an example 1`] = `
"<div class="cm-s-neo"># Hello World
</div>"
`;

exports[`Supported languages OCaml should syntax highlight an example 1`] = `
"<div class="cm-s-neo"><span class="cm-builtin">print_string</span> <span class="cm-string">&quot;Hello World\\n&quot;</span>
</div>"
`;

exports[`Supported languages Objective-C should syntax highlight an example 1`] = `
"<div class="cm-s-neo"><span class="cm-comment">/*</span>
 <span class="cm-comment">Build on OS X:</span>
 <span class="cm-comment">clang -framework Foundation -fobjc-arc objc.m -o objc</span>

 <span class="cm-comment">Build on Linux with GNUstep:</span>
 <span class="cm-comment">clang \\\`gnustep-config --objc-flags\\\` \\\`gnustep-config --base-libs\\\` -fobjc-nonfragile-abi -fobjc-arc objc.m -o objc</span>
 <span class="cm-comment">*/</span>

<span class="cm-meta">#import &lt;Foundation/Foundation.h&gt;</span>

<span class="cm-type">int</span> <span class="cm-def">main</span>(<span class="cm-type">void</span>)
{
    <span class="cm-variable">NSLog</span>(<span class="cm-variable">@</span><span class="cm-string">&quot;Hello World&quot;</span>);
}
</div>"
`;

exports[`Supported languages Objective-C++ should syntax highlight an example 1`] = `
"<div class="cm-s-neo"><span class="cm-comment">/*</span>
 <span class="cm-comment">Build on OS X:</span>
 <span class="cm-comment">clang -framework Foundation -fobjc-arc objc.m -o objc</span>

 <span class="cm-comment">Build on Linux with GNUstep:</span>
 <span class="cm-comment">clang \\\`gnustep-config --objc-flags\\\` \\\`gnustep-config --base-libs\\\` -fobjc-nonfragile-abi -fobjc-arc objc.m -o objc</span>
 <span class="cm-comment">*/</span>

<span class="cm-meta">#import &lt;Foundation/Foundation.h&gt;</span>

<span class="cm-type">int</span> <span class="cm-def">main</span>(<span class="cm-type">void</span>)
{
    <span class="cm-variable">NSLog</span>(<span class="cm-variable">@</span><span class="cm-string">&quot;Hello World&quot;</span>);
}
</div>"
`;

exports[`Supported languages PHP should syntax highlight an example 1`] = `
"<div class="cm-s-neo"><span class="cm-operator">&lt;?</span><span class="cm-variable">php</span>

<span class="cm-keyword">echo</span> <span class="cm-string">&#x27;Hello World&#x27;</span>;
</div>"
`;

exports[`Supported languages Perl should syntax highlight an example 1`] = `
"<div class="cm-s-neo"><span class="cm-comment">#!/usr/bin/perl</span>
<span class="cm-keyword">print</span> <span class="cm-string">&quot;Hello World\\n&quot;</span>;
</div>"
`;

exports[`Supported languages PowerShell should syntax highlight an example 1`] = `
"<div class="cm-s-neo"><span class="cm-string">&#x27;Hello World&#x27;</span>
</div>"
`;

exports[`Supported languages Python should syntax highlight an example 1`] = `
"<div class="cm-s-neo"><span class="cm-comment">#!/usr/bin/env python</span>
<span class="cm-builtin">print</span> <span class="cm-string">&quot;Hello World&quot;</span>
</div>"
`;

exports[`Supported languages R should syntax highlight an example 1`] = `
"<div class="cm-s-neo"><span class="cm-variable">cat</span>(<span class="cm-string">&quot;Hello World</span><span class="cm-string-2">\\n</span><span class="cm-string">&quot;</span>)
</div>"
`;

exports[`Supported languages Ruby should syntax highlight an example 1`] = `
"<div class="cm-s-neo"><span class="cm-comment">#!/usr/bin/env ruby</span>
<span class="cm-variable">puts</span> <span class="cm-string">&quot;Hello World&quot;</span>
</div>"
`;

exports[`Supported languages Rust should syntax highlight an example 1`] = `
"<div class="cm-s-neo"><span class="cm-keyword">fn</span> <span class="cm-def">main</span>() {
    <span class="cm-variable-3">println!</span>(<span class="cm-string">&quot;Hello World&quot;</span>);
}
</div>"
`;

exports[`Supported languages SQL should syntax highlight an example 1`] = `
"<div class="cm-s-neo"><span class="cm-keyword">SELECT</span> <span class="cm-string">&#x27;Hello World&#x27;</span><span class="cm-punctuation">;</span>
</div>"
`;

exports[`Supported languages Scala should syntax highlight an example 1`] = `
"<div class="cm-s-neo"><span class="cm-keyword">object</span> <span class="cm-def">HelloWorld</span> <span class="cm-keyword">extends</span> <span class="cm-type">App</span> {
  <span class="cm-keyword">println</span>(<span class="cm-string">&quot;Hello World&quot;</span>)
}
</div>"
`;

exports[`Supported languages Shell should syntax highlight an example 1`] = `
"<div class="cm-s-neo"><span class="cm-meta">#!/bin/sh</span>
<span class="cm-builtin">echo</span> <span class="cm-string">&quot;Hello World&quot;</span>
</div>"
`;

exports[`Supported languages Solidity should syntax highlight an example 1`] = `
"<div class="cm-s-neo"><span class="cm-comment">// SPDX-License-Identifier: GPL-3.0</span>
<span class="cm-keyword">pragma</span> <span class="cm-keyword">solidity</span> <span class="cm-version">&gt;=0.7.0 &lt;0.9.0</span>;
<span class="cm-doc">/// </span><span class="cm-docReserve">@title</span> <span class="cm-doc">Voting</span> <span class="cm-doc">with</span> <span class="cm-doc">delegation</span><span class="cm-number">.</span>
<span class="cm-keyword">contract</span> <span class="cm-variable">Ballot</span> {
    <span class="cm-comment">// This declares a new complex type which will</span>
    <span class="cm-comment">// be used for variables later.</span>
    <span class="cm-comment">// It will represent a single voter.</span>
    <span class="cm-keyword">struct</span> <span class="cm-variable">Voter</span> {
        <span class="cm-keyword">uint</span> <span class="cm-variable">weight</span>; <span class="cm-comment">// weight is accumulated by delegation</span>
        <span class="cm-keyword">bool</span> <span class="cm-variable">voted</span>;  <span class="cm-comment">// if true, that person already voted</span>
        <span class="cm-keyword">address</span> <span class="cm-variable">delegate</span>; <span class="cm-comment">// person delegated to</span>
        <span class="cm-keyword">uint</span> <span class="cm-variable">vote</span>;   <span class="cm-comment">// index of the voted proposal</span>
    }

    <span class="cm-comment">// This is a type for a single proposal.</span>
    <span class="cm-keyword">struct</span> <span class="cm-variable">Proposal</span> {
        <span class="cm-keyword">bytes32</span> <span class="cm-variable">name</span>;   <span class="cm-comment">// short name (up to 32 bytes)</span>
        <span class="cm-keyword">uint</span> <span class="cm-variable">voteCount</span>; <span class="cm-comment">// number of accumulated votes</span>
    }

    <span class="cm-keyword">address</span> <span class="cm-keyword">public</span> <span class="cm-variable">chairperson</span>;

    <span class="cm-comment">// This declares a state variable that</span>
    <span class="cm-comment">// stores a \`Voter\` struct for each possible address.</span>
    <span class="cm-keyword">mapping</span>(<span class="cm-keyword">address</span> <span class="cm-operator">=&gt;</span> <span class="cm-variable">Voter</span>) <span class="cm-keyword">public</span> <span class="cm-variable">voters</span>;

    <span class="cm-comment">// A dynamically-sized array of \`Proposal\` structs.</span>
    <span class="cm-variable">Proposal</span>[] <span class="cm-keyword">public</span> <span class="cm-variable">proposals</span>;

    <span class="cm-doc">/// Create a new ballot to choose one of \`proposalNames\`.</span>
    <span class="cm-keyword">constructor</span>(<span class="cm-keyword">bytes32</span>[] <span class="cm-keyword">memory</span> <span class="cm-variable">proposalNames</span>) {
        <span class="cm-variable">chairperson</span> <span class="cm-operator">=</span> <span class="cm-variable-2">msg.sender</span>;
        <span class="cm-variable">voters</span>[<span class="cm-variable">chairperson</span>]<span class="cm-number">.</span><span class="cm-variable">weight</span> <span class="cm-operator">=</span> <span class="cm-number">1</span>;

        <span class="cm-comment">// For each of the provided proposal names,</span>
        <span class="cm-comment">// create a new proposal object and add it</span>
        <span class="cm-comment">// to the end of the array.</span>
        <span class="cm-keyword">for</span> (<span class="cm-keyword">uint</span> <span class="cm-variable">i</span> <span class="cm-operator">=</span> <span class="cm-number">0</span>; <span class="cm-variable">i</span> <span class="cm-operator">&lt;</span> <span class="cm-variable">proposalNames</span><span class="cm-number">.</span><span class="cm-variable">length</span>; <span class="cm-variable">i</span><span class="cm-operator">++</span>) {
            <span class="cm-comment">// \`Proposal({...})\` creates a temporary</span>
            <span class="cm-comment">// Proposal object and \`proposals.push(...)\`</span>
            <span class="cm-comment">// appends it to the end of \`proposals\`.</span>
            <span class="cm-variable">proposals</span><span class="cm-number">.</span><span class="cm-variable">push</span>(<span class="cm-variable">Proposal</span>({
                <span class="cm-variable">name</span>: <span class="cm-variable">proposalNames</span>[<span class="cm-variable">i</span>],
                <span class="cm-variable">voteCount</span>: <span class="cm-number">0</span>
            }));
        }
    }

    <span class="cm-comment">// Give \`voter\` the right to vote on this ballot.</span>
    <span class="cm-comment">// May only be called by \`chairperson\`.</span>
    <span class="cm-keyword">function</span> <span class="cm-functionName">giveRightToVote</span>(<span class="cm-keyword">address</span> <span class="cm-parameterValue">voter</span>) <span class="cm-keyword">external</span> {
        <span class="cm-comment">// If the first argument of \`require\` evaluates</span>
        <span class="cm-comment">// to \`false\`, execution terminates and all</span>
        <span class="cm-comment">// changes to the state and to Ether balances</span>
        <span class="cm-comment">// are reverted.</span>
        <span class="cm-comment">// This used to consume all gas in old EVM versions, but</span>
        <span class="cm-comment">// not anymore.</span>
        <span class="cm-comment">// It is often a good idea to use \`require\` to check if</span>
        <span class="cm-comment">// functions are called correctly.</span>
        <span class="cm-comment">// As a second argument, you can also provide an</span>
        <span class="cm-comment">// explanation about what went wrong.</span>
        <span class="cm-errorHandling">require</span>(
            <span class="cm-variable-2">msg.sender</span> <span class="cm-operator">==</span> <span class="cm-variable">chairperson</span>,
            <span class="cm-string">&quot;Only chairperson can give right to vote.&quot;</span>
        );
        <span class="cm-errorHandling">require</span>(
            <span class="cm-operator">!</span><span class="cm-variable">voters</span>[<span class="cm-variable">voter</span>]<span class="cm-number">.</span><span class="cm-variable">voted</span>,
            <span class="cm-string">&quot;The voter already voted.&quot;</span>
        );
        <span class="cm-errorHandling">require</span>(<span class="cm-variable">voters</span>[<span class="cm-variable">voter</span>]<span class="cm-number">.</span><span class="cm-variable">weight</span> <span class="cm-operator">==</span> <span class="cm-number">0</span>);
        <span class="cm-variable">voters</span>[<span class="cm-variable">voter</span>]<span class="cm-number">.</span><span class="cm-variable">weight</span> <span class="cm-operator">=</span> <span class="cm-number">1</span>;
    }

    <span class="cm-doc">/// Delegate your vote to the voter \`to\`.</span>
    <span class="cm-keyword">function</span> <span class="cm-functionName">delegate</span>(<span class="cm-keyword">address</span> <span class="cm-parameterValue">to</span>) <span class="cm-keyword">external</span> {
        <span class="cm-comment">// assigns reference</span>
        <span class="cm-variable">Voter</span> <span class="cm-keyword">storage</span> <span class="cm-variable">sender</span> <span class="cm-operator">=</span> <span class="cm-variable">voters</span>[<span class="cm-variable-2">msg.sender</span>];
        <span class="cm-errorHandling">require</span>(<span class="cm-variable">sender</span><span class="cm-number">.</span><span class="cm-variable">weight</span> <span class="cm-operator">!=</span> <span class="cm-number">0</span>, <span class="cm-string">&quot;You have no right to vote&quot;</span>);
        <span class="cm-errorHandling">require</span>(<span class="cm-operator">!</span><span class="cm-variable">sender</span><span class="cm-number">.</span><span class="cm-variable">voted</span>, <span class="cm-string">&quot;You already voted.&quot;</span>);

        <span class="cm-errorHandling">require</span>(<span class="cm-variable">to</span> <span class="cm-operator">!=</span> <span class="cm-variable-2">msg.sender</span>, <span class="cm-string">&quot;Self-delegation is disallowed.&quot;</span>);

        <span class="cm-comment">// Forward the delegation as long as</span>
        <span class="cm-comment">// \`to\` also delegated.</span>
        <span class="cm-comment">// In general, such loops are very dangerous,</span>
        <span class="cm-comment">// because if they run too long, they might</span>
        <span class="cm-comment">// need more gas than is available in a block.</span>
        <span class="cm-comment">// In this case, the delegation will not be executed,</span>
        <span class="cm-comment">// but in other situations, such loops might</span>
        <span class="cm-comment">// cause a contract to get &quot;stuck&quot; completely.</span>
        <span class="cm-keyword">while</span> (<span class="cm-variable">voters</span>[<span class="cm-variable">to</span>]<span class="cm-number">.</span><span class="cm-variable">delegate</span> <span class="cm-operator">!=</span> <span class="cm-keyword">address</span>(<span class="cm-number">0</span>)) {
            <span class="cm-variable">to</span> <span class="cm-operator">=</span> <span class="cm-variable">voters</span>[<span class="cm-variable">to</span>]<span class="cm-number">.</span><span class="cm-variable">delegate</span>;

            <span class="cm-comment">// We found a loop in the delegation, not allowed.</span>
            <span class="cm-errorHandling">require</span>(<span class="cm-variable">to</span> <span class="cm-operator">!=</span> <span class="cm-variable-2">msg.sender</span>, <span class="cm-string">&quot;Found loop in delegation.&quot;</span>);
        }

        <span class="cm-variable">Voter</span> <span class="cm-keyword">storage</span> <span class="cm-variable">delegate_</span> <span class="cm-operator">=</span> <span class="cm-variable">voters</span>[<span class="cm-variable">to</span>];

        <span class="cm-comment">// Voters cannot delegate to accounts that cannot vote.</span>
        <span class="cm-errorHandling">require</span>(<span class="cm-variable">delegate_</span><span class="cm-number">.</span><span class="cm-variable">weight</span> <span class="cm-operator">&gt;=</span> <span class="cm-number">1</span>);

        <span class="cm-comment">// Since \`sender\` is a reference, this</span>
        <span class="cm-comment">// modifies \`voters[msg.sender]\`.</span>
        <span class="cm-variable">sender</span><span class="cm-number">.</span><span class="cm-variable">voted</span> <span class="cm-operator">=</span> <span class="cm-atom">true</span>;
        <span class="cm-variable">sender</span><span class="cm-number">.</span><span class="cm-variable">delegate</span> <span class="cm-operator">=</span> <span class="cm-variable">to</span>;

        <span class="cm-keyword">if</span> (<span class="cm-variable">delegate_</span><span class="cm-number">.</span><span class="cm-variable">voted</span>) {
            <span class="cm-comment">// If the delegate already voted,</span>
            <span class="cm-comment">// directly add to the number of votes</span>
            <span class="cm-variable">proposals</span>[<span class="cm-variable">delegate_</span><span class="cm-number">.</span><span class="cm-variable">vote</span>]<span class="cm-number">.</span><span class="cm-variable">voteCount</span> <span class="cm-operator">+=</span> <span class="cm-variable">sender</span><span class="cm-number">.</span><span class="cm-variable">weight</span>;
        } <span class="cm-keyword">else</span> {
            <span class="cm-comment">// If the delegate did not vote yet,</span>
            <span class="cm-comment">// add to her weight.</span>
            <span class="cm-variable">delegate_</span><span class="cm-number">.</span><span class="cm-variable">weight</span> <span class="cm-operator">+=</span> <span class="cm-variable">sender</span><span class="cm-number">.</span><span class="cm-variable">weight</span>;
        }
    }

    <span class="cm-doc">/// Give your vote (including votes delegated to you)</span>
    <span class="cm-doc">/// to proposal \`proposals[proposal].name\`.</span>
    <span class="cm-keyword">function</span> <span class="cm-functionName">vote</span>(<span class="cm-keyword">uint</span> <span class="cm-parameterValue">proposal</span>) <span class="cm-keyword">external</span> {
        <span class="cm-variable">Voter</span> <span class="cm-keyword">storage</span> <span class="cm-variable">sender</span> <span class="cm-operator">=</span> <span class="cm-variable">voters</span>[<span class="cm-variable-2">msg.sender</span>];
        <span class="cm-errorHandling">require</span>(<span class="cm-variable">sender</span><span class="cm-number">.</span><span class="cm-variable">weight</span> <span class="cm-operator">!=</span> <span class="cm-number">0</span>, <span class="cm-string">&quot;Has no right to vote&quot;</span>);
        <span class="cm-errorHandling">require</span>(<span class="cm-operator">!</span><span class="cm-variable">sender</span><span class="cm-number">.</span><span class="cm-variable">voted</span>, <span class="cm-string">&quot;Already voted.&quot;</span>);
        <span class="cm-variable">sender</span><span class="cm-number">.</span><span class="cm-variable">voted</span> <span class="cm-operator">=</span> <span class="cm-atom">true</span>;
        <span class="cm-variable">sender</span><span class="cm-number">.</span><span class="cm-variable">vote</span> <span class="cm-operator">=</span> <span class="cm-variable">proposal</span>;

        <span class="cm-comment">// If \`proposal\` is out of the range of the array,</span>
        <span class="cm-comment">// this will throw automatically and revert all</span>
        <span class="cm-comment">// changes.</span>
        <span class="cm-variable">proposals</span>[<span class="cm-variable">proposal</span>]<span class="cm-number">.</span><span class="cm-variable">voteCount</span> <span class="cm-operator">+=</span> <span class="cm-variable">sender</span><span class="cm-number">.</span><span class="cm-variable">weight</span>;
    }

    <span class="cm-doc">/// </span><span class="cm-docReserve">@dev</span> <span class="cm-doc">Computes</span> <span class="cm-doc">the</span> <span class="cm-doc">winning</span> <span class="cm-doc">proposal</span> <span class="cm-doc">taking</span> <span class="cm-doc">all</span>
    <span class="cm-doc">/// previous votes into account.</span>
    <span class="cm-keyword">function</span> <span class="cm-functionName">winningProposal</span>() <span class="cm-keyword">public</span> <span class="cm-keyword">view</span>
            <span class="cm-keyword">returns</span> (<span class="cm-keyword">uint</span> <span class="cm-parameterValue">winningProposal_</span>)
    {
        <span class="cm-keyword">uint</span> <span class="cm-variable">winningVoteCount</span> <span class="cm-operator">=</span> <span class="cm-number">0</span>;
        <span class="cm-keyword">for</span> (<span class="cm-keyword">uint</span> <span class="cm-variable">p</span> <span class="cm-operator">=</span> <span class="cm-number">0</span>; <span class="cm-variable">p</span> <span class="cm-operator">&lt;</span> <span class="cm-variable">proposals</span><span class="cm-number">.</span><span class="cm-variable">length</span>; <span class="cm-variable">p</span><span class="cm-operator">++</span>) {
            <span class="cm-keyword">if</span> (<span class="cm-variable">proposals</span>[<span class="cm-variable">p</span>]<span class="cm-number">.</span><span class="cm-variable">voteCount</span> <span class="cm-operator">&gt;</span> <span class="cm-variable">winningVoteCount</span>) {
                <span class="cm-variable">winningVoteCount</span> <span class="cm-operator">=</span> <span class="cm-variable">proposals</span>[<span class="cm-variable">p</span>]<span class="cm-number">.</span><span class="cm-variable">voteCount</span>;
                <span class="cm-variable">winningProposal_</span> <span class="cm-operator">=</span> <span class="cm-variable">p</span>;
            }
        }
    }

    <span class="cm-comment">// Calls winningProposal() function to get the index</span>
    <span class="cm-comment">// of the winner contained in the proposals array and then</span>
    <span class="cm-comment">// returns the name of the winner</span>
    <span class="cm-keyword">function</span> <span class="cm-functionName">winnerName</span>() <span class="cm-keyword">external</span> <span class="cm-keyword">view</span>
            <span class="cm-keyword">returns</span> (<span class="cm-keyword">bytes32</span> <span class="cm-parameterValue">winnerName_</span>)
    {
        <span class="cm-variable">winnerName_</span> <span class="cm-operator">=</span> <span class="cm-variable">proposals</span>[<span class="cm-variable">winningProposal</span>()]<span class="cm-number">.</span><span class="cm-variable">name</span>;
    }
}
</div>"
`;

exports[`Supported languages Swift should syntax highlight an example 1`] = `
"<div class="cm-s-neo"><span class="cm-variable">print</span><span class="cm-punctuation">(</span><span class="cm-string">&quot;Hello World&quot;</span><span class="cm-punctuation">)</span>
</div>"
`;

exports[`Supported languages TOML should syntax highlight an example 1`] = `
"<div class="cm-s-neo"><span class="cm-comment"># This is a TOML document.</span>

<span class="cm-property">title</span> = <span class="cm-string">&quot;TOML Example&quot;</span>

<span class="cm-atom">[owner]</span>
<span class="cm-property">name</span> = <span class="cm-string">&quot;Tom Preston-Werner&quot;</span>
<span class="cm-property">dob</span> = <span class="cm-number">1979-05-27</span>T<span class="cm-number">07</span>:<span class="cm-number">32</span>:<span class="cm-number">00-08</span>:<span class="cm-number">00</span> <span class="cm-comment"># First class dates</span>

<span class="cm-atom">[database]</span>
<span class="cm-property">server</span> = <span class="cm-string">&quot;192.168.1.1&quot;</span>
<span class="cm-property">ports</span> = <span class="cm-bracket">[</span> <span class="cm-number">8000</span>, <span class="cm-number">8001</span>, <span class="cm-number">8002</span> <span class="cm-bracket">]</span>
<span class="cm-property">connection_max</span> = <span class="cm-number">5000</span>
<span class="cm-property">enabled</span> = <span class="cm-atom">true</span>

<span class="cm-atom">[servers]</span>

  <span class="cm-comment"># Indentation (tabs and/or spaces) is allowed but not required</span>
  <span class="cm-atom">[servers.alpha]</span>
  <span class="cm-property">ip</span> = <span class="cm-string">&quot;10.0.0.1&quot;</span>
  <span class="cm-property">dc</span> = <span class="cm-string">&quot;eqdc10&quot;</span>

  <span class="cm-atom">[servers.beta]</span>
  <span class="cm-property">ip</span> = <span class="cm-string">&quot;10.0.0.2&quot;</span>
  <span class="cm-property">dc</span> = <span class="cm-string">&quot;eqdc10&quot;</span>

<span class="cm-atom">[clients]</span>
<span class="cm-property">data</span> = <span class="cm-bracket">[</span> <span class="cm-bracket">[</span><span class="cm-string">&quot;gamma&quot;</span>, <span class="cm-string">&quot;delta&quot;</span><span class="cm-bracket">]</span>, <span class="cm-bracket">[</span><span class="cm-number">1</span>, <span class="cm-number">2</span><span class="cm-bracket">]</span> <span class="cm-bracket">]</span>

<span class="cm-comment"># Line breaks are OK when inside arrays</span>
<span class="cm-property">hosts</span> = <span class="cm-bracket">[</span>
  <span class="cm-string">&quot;alpha&quot;</span>,
  <span class="cm-string">&quot;omega&quot;</span>
<span class="cm-bracket">]</span>
</div>"
`;

exports[`Supported languages TypeScript should syntax highlight an example 1`] = `
"<div class="cm-s-neo"><span class="cm-keyword">let</span> { <span class="cm-def">a</span>, <span class="cm-def">b</span> }: { <span class="cm-property">a</span>: <span class="cm-type">string</span>, <span class="cm-property">b</span>: <span class="cm-type">number</span> } <span class="cm-operator">=</span> <span class="cm-variable">o</span>;
</div>"
`;

exports[`Supported languages XML should syntax highlight an example 1`] = `
"<div class="cm-s-neo"><span class="cm-meta">&lt;?xml</span> <span class="cm-meta">version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">text</span><span class="cm-tag cm-bracket">&gt;</span><span class="cm-atom">&lt;![CDATA[Hello World]]&gt;</span><span class="cm-tag cm-bracket">&lt;/</span><span class="cm-tag">text</span><span class="cm-tag cm-bracket">&gt;</span>
</div>"
`;

exports[`Supported languages YAML should syntax highlight an example 1`] = `
"<div class="cm-s-neo"><span class="cm-atom">hello</span><span class="cm-meta">: </span>world
</div>"
`;

exports[`Supported languages cURL should syntax highlight an example 1`] = `
"<div class="cm-s-neo"><span class="cm-builtin">curl</span> <span class="cm-attribute">--request</span> GET \\
  <span class="cm-attribute">--url</span> <span class="cm-string">&#x27;https://dash.readme.io/api/v1/api-specification?perPage=10&amp;page=1&#x27;</span> \\
  <span class="cm-attribute">--header</span> <span class="cm-string">&#x27;x-readme-version: v3.0&#x27;</span>
</div>"
`;

exports[`code folding relevant options in the props matches snapshot 1`] = `
{
  "editable": true,
  "foldGutter": true,
  "gutters": [
    "CodeMirror-linenumbers",
    "CodeMirror-foldgutter",
  ],
  "lineNumbers": true,
  "mode": "application/ld+json",
  "readOnly": true,
  "tabSize": 2,
  "theme": "neo",
}
`;

exports[`variable substitution should tokenize variables outside of quotes over multiple lines 1`] = `
"
    const foo = APIKEY;
    const bar = NAME;

    fetch({ foo, bar, baz: TOKEN });
  "
`;
